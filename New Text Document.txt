package rrc.recruitment.portal.configuration;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.security.CodeSource;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;


import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.scheduling.Trigger;
import org.springframework.scheduling.TriggerContext;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.SchedulingConfigurer;
import org.springframework.scheduling.config.ScheduledTaskRegistrar;

import rrc.recruitment.portal.common.ConstantPage;
import rrc.recruitment.portal.controller.cms.BackupController;
import rrc.recruitment.portal.entity.ScheduleBackupObj;

@Configuration
@EnableScheduling
public class ScheduleBackup  implements SchedulingConfigurer{

	private static ScheduleBackupObj scheduleBackup = new ScheduleBackupObj();
	Logger logger = Logger.getLogger(ScheduleBackup.class);
    @Autowired
    Environment env;
    
    @Bean(destroyMethod = "shutdown")
    public Executor taskExecutor() {
        return Executors.newScheduledThreadPool(100);
    }
	
    
	@Override
	public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {
		taskRegistrar.setScheduler(taskExecutor());
        taskRegistrar.addTriggerTask(new Runnable() {
        @Override public void run() {
                        try {
                        	if(ScheduleBackup.scheduleBackup.getScheduleTime() > 0) {
                        		Backupdbtosql(ScheduleBackup.scheduleBackup.getScheduleTime());
                        	}
						} catch (InterruptedException | URISyntaxException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
                    }
                },
                new Trigger() {
                    @Override public Date nextExecutionTime(TriggerContext triggerContext) {
                    	Calendar nextExecutionTime = new GregorianCalendar();
                        nextExecutionTime.add(Calendar.MILLISECOND, ScheduleBackup.scheduleBackup.getScheduleTime());
                        return nextExecutionTime.getTime();
                    }
                }
        );
		
	}
	
	synchronized void Backupdbtosql(int time) throws InterruptedException, URISyntaxException {
		try {

			CodeSource codeSource = BackupController.class.getProtectionDomain().getCodeSource();
			File jarFile = new File(codeSource.getLocation().toURI().getPath());
			String jarDir = jarFile.getParentFile().getPath();
			
			DateFormat df = new SimpleDateFormat("ddMMyyyy");
			Date date = new Date();
			String strCurrentDate = df.format(date);
			
			/* Creating Path Constraints for folder saving */
			/* Here the backup folder is created for saving inside it */
			String folderPath = jarDir + "\\backup\\" + strCurrentDate ;

			/* Creating Folder if it does not exist */
			File f1 = new File(folderPath);
			if (!f1.exists()) {
				f1.mkdir();
			}

			/* Creating Path Constraints for backup saving */
			/*
			 * Here the backup is saved in a folder called backup with the name
			 * backup.sql
			 */
			String savePath = "\"" + jarDir + "\\backup\\" + strCurrentDate + "\\"+ "backup.sql\""; 
			/* NOTE: Used to create a cmd command */
			String executeCmd = ConstantPage.MYSQL_DOCUMENT + "mysqldump -u" + ConstantPage.DBUSER + " -p"
					+ ConstantPage.DBPASS + " --database " + ConstantPage.DBNAME  + " -r " + savePath;

			/* NOTE: Executing the command here */
			Process runtimeProcess = Runtime.getRuntime().exec(executeCmd);
			int processComplete = runtimeProcess.waitFor();
			
			/*
			 * processComplete = 0 if correctly executed, will contain other values if
			 * not
			 */
			if (processComplete == 0) {
				logger.info("Backup Completed");
			} else {
				logger.info("Backup Failre");
			}

		} catch (IOException ex) {
			ex.printStackTrace();
		}
	}

	public static ScheduleBackupObj getScheduleBackup() {
		return scheduleBackup;
	}

	public static void setScheduleBackup(ScheduleBackupObj scheduleBackup) {
		ScheduleBackup.scheduleBackup = scheduleBackup;
	}

}
